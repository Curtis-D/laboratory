



for i in `ls in/raw`; do cat in/raw/$i | sed 's/.* --> //' | sed 's/\/.*//' > in/clean/$i; done

a100 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/100"))
a200 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/200"))
a300 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/300"))
a400 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/400"))
a500 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/500"))
a600 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/600"))
a700 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/700"))
a800 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/800"))
a900 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/900"))
a1000 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/1000"))
a1100 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/1100"))
a1200 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/1200"))
a1300 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/1300"))
a1400 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/1400"))
a1500 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/1500"))
a1600 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/1600"))
a1700 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/1700"))
a1800 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/1800"))
a1900 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/1900"))
a2000 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/2000"))
a2100 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/2100"))
a2200 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/2200"))
a2300 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/2400"))
a2400 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/2300"))
a2500 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/2500"))
a2600 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/2600"))
a2700 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/2700"))
a2800 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/2800"))
a2900 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/2900"))
a3000 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/3000"))
a3500 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/3500"))
a4000 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/4000"))
a4500 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/4500"))
a5000 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/5000"))
a5500 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/5500"))
a6000 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/6000"))
a6500 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/6500"))
a7000 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/7000"))
a7500 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/7500"))
a8000 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/8000"))
a8500 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/8500"))
a9000 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/9000"))
a9500 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/9500"))
a10000 <- read.table(file("/Users/josh/data/rdf-udp/in/clean/10000"))

a <- c()
a[1] <- c(100, a100)

a <- table(c(1,2,3), c(10, 20, 30))

a <- c(
    100, a100,
    500, a500,
    800, a800,
    1000, a1000,
    2000, a2000,
    5000, a5000,
    10000, a10000)
    
a <- c()
a[1] <- c(100, a100)


a1 <- c(100, 500, 800, 1000, 2000, 5000, 10000)
a2 <- c(a100, a500, a800, a1000, a2000, a5000, a10000)


sum(a100)/length(a100[,1])

avg <- function(l) {
  sum(l) / length(l[,1])
}


b <- c(
  c(1, 2),
  c(3 4))
  
100	4418.281
200	2387.119
300	1939.748
400	1731.374
500	1406.965
600	1194.781
700	998.1181
800	901.015
900	812.5194
1000	727.0043
1100	667.7158
1200	616.3601
1300	558.272
1400	527.8907
1500	332.1185
1600	236.2936
1700	179.4052
1800	119.9507
1900	109.5433
2000	86.88176
2100	107.9895
2200	102.0658
2300	91.13146
2400	91.13146
2500	100.5881
2600	96.1756
2700	102.1782
2800	87.41363
2900	98.67283
3000	49.24638
3500	36.73951
4000	23.88871
4500	28.84033
5000	20.91216
5500	25.65783
6000	18.69659
6500	21.95439
7000	23.52145
7500	19.18352
8000	16.37329
8500	15.76039
9000	17.31209
9500	15.14349
10000	12.45271




mvn install:install-file -DgroupId=net.contrapunctus -DartifactId=lzma -Dversion=4.63-jio-0.94 -Dpackaging=jar -Dfile=/Users/josh/Downloads/lzma-4.63-jio-0.94.jar -DcreateChecksum=true

scp ubuntu@fortytwo.net:/tmp/tweet_metrics.txt .


################################################################################
# AllegroServe configuration (for HTTP GET tests)

(require :aserve)
(defpackage :tutorial 
    (:use :common-lisp :excl :net.aserve :net.html.generator))
(in-package :tutorial)
(net.aserve::debug-off :log)
(start :port 8000)
(publish :path "/hello"
    :content-type "text/plain"
    :function 
    #'(lambda (req ent)
          (with-http-response (req ent)
              (with-http-body (req ent)
                  (princ "Hello World!" *html-stream*)))))
(defparameter *count* 0)
(publish :path "/count"
    :content-type "text/plain"
    :function
    #'(lambda (req ent)
          (setf *count* (+ 1 *count*))
	  (if (eq 2 *count*) (print "two"))
          (with-http-response (req ent)
              (with-http-body (req ent)
                  (princ "" *html-stream*)))))
(publish :path "/bigget"
    :content-type "text/plain"
    :function
    #'(lambda (req ent)
        (let ((size (parse-integer (cdr (assoc "size" (request-query req) :test #'equal)))))
	  (print size)
          (with-http-response (req ent)
              (with-http-body (req ent)
	          (loop for i from 1 to size do
                  (princ "." *html-stream*)))))))

		  
################################################################################
# HTTP GET throughput

pdf("/tmp/http_get_throughput.pdf")
h <- read.table(file("/Users/josh/data/rdf-udp/http_get_stats.txt"), header=TRUE)
plot(h$size, h$size * h$messages_per_second,
    ann=FALSE)
title(xlab="Size of HTTP GET response entity (bytes)",
   ylab="Throughput (bytes/second)", cex.lab=1.25)
fit <- smooth.spline(h$size, h$size * h$messages_per_second, spar=1.0)
lines(fit)
#abline(v=50000)
#abline(v=200000)
dev.off()


################################################################################
# HTTP POST throughput

pdf("/tmp/http_post_throughput.pdf")
h <- read.table(file("/Users/josh/data/rdf-udp/http_throughput.txt"), header=TRUE)
h_old <- read.table(file("/Users/josh/data/rdf-udp/old/http_throughput.txt"), header=TRUE)
#par(mfcol=2, mfrow=2)
plot(h$size, h$size * h$messages_per_second,
    #xlim=c(0,100000),
    ann=FALSE)
title(cex.lab=1.25,
    xlab="Size of HTTP POST entity (bytes)",
    ylab="Throughput (bytes/second)")
#plot(h_old$size, h_old$size * h_old$messages_per_second)
fit <- smooth.spline(h$size, h$size * h$messages_per_second, spar=1.0)
lines(fit)
dev.off()

f <- data.frame(h$size, h$size * h$messages_per_second)
plot(f, xlim=c(0,200000))
abline(v=65536)
abline(v=65536*2)


################################################################################
# UDP throughput

r <- read.table(file("/Users/josh/data/rdf-udp/results"))

pdf("/tmp/udp_throughput.pdf")
plot(r[,1], r[,2]*r[,1],
  log="",
  xlim=c(0, 4000),
  ann=FALSE)
title(cex.lab=1.25,
  xlab="Size of UDP payload (bytes)",
  ylab="Throughput (bytes/second)")
fit <- smooth.spline(r[,1], r[,2]*r[,1], spar=0.2)
lines(fit)
abline(v=568, lty="dashed")
abline(v=1492, lty="dashed")
dev.off();

pdf("/tmp/udp_packet_retention.pdf")
plot(r,
    log="",
    xlim=c(0,4000),
    ann=FALSE)
title(cex.lab=1.25,
    xlab="Size of UDP payload (bytes)",
    ylab="Transfer rate (messages/second)")
fit <- smooth.spline(r, spar=0.5)
lines(fit)
dev.off()


################################################################################
# compression size

m <- read.table(file("/Users/josh/data/rdf-udp/tweet_metrics.txt"))
mean(m[,2:5])
sd(m[,2:5])

m[,6] <- NULL
m[,3] <- NULL

# See: http://monkeysuncle.stanford.edu/?p=485
error.bar <- function(x, y, upper, lower=upper, length=0.1,...) {
  if(length(x) != length(y) | length(y) !=length(lower) | length(lower) != length(upper))
    stop("vectors must be same length")
  arrows(x,y+upper, x, y-lower, angle=90, code=3, length=length, ...)
}

pdf("/tmp/compression.pdf")
y <- m[,2:5]
y.means <- apply(y,2,mean)
y.sd <- apply(y,2,sd)
barx <- barplot(y.means,
  name=c("none", "LZMA", "mini-LZO", "DEFLATE"),
  ylim=c(0,7000),
  ann=FALSE)
title(cex.lab=1.25,
  ylab="Message size (bytes)",
  xlab="Compression algorithm")
error.bar(barx,y.means, y.sd)
abline(h=568, lty="dashed")
abline(h=1492, lty="dashed")
dev.off()


################################################################################
# compression/decompression performance

plot_and_fit <- function(x, y, color) {
    points(x, y, col=color)
    fit <- smooth.spline(x, y)
    lines(fit, col=color)
}

p <- read.table(file("/Users/josh/data/rdf-udp/compression.txt"), header=TRUE)
plot(p$bytes, 1000/p$LZMA, col="green", ylim=c(0,8000))
plot_and_fit(p$bytes, 1000/p$LZMA, "green")
plot_and_fit(p$bytes, 1000/p$ZIP, "red")
plot_and_fit(p$bytes, 1000/p$GZIP, "blue")
plot_and_fit(p$bytes, 1000/p$MINILZO, "orange")

p <- read.table(file("/Users/josh/data/rdf-udp/decompression.txt"), header=TRUE)
plot(p$bytes, 1000/p$LZMA, col="green", ylim=c(0,22000))
plot_and_fit(p$bytes, 1000/p$LZMA, "green")
plot_and_fit(p$bytes, 1000/p$ZIP, "red")
plot_and_fit(p$bytes, 1000/p$GZIP, "blue")
plot_and_fit(p$bytes, 1000/p$MINILZO, "orange")


################################################################################
#

f <- function(x) { 1200 * (1 -x) }
g <- function(x) { 1 / x }
h <- function(x) { 1 / (x*x) }
i <- function(x) { 1 / sqrt(x) }
plot(i,
  xlim=c(0.0001,1),
  ylim=c(0.0001,10000),
  log="xy")
  
  
  
  
  
  
################################################################################
#

threads	min	max
1	128.0249	268.909
2	132.0769	260.6918
3	120.5436	229.2343
4	128.8073	237.1102
6	112.2169	160.6747
8	110.2911	121.8853

mean(read.table(file("/Users/josh/data/rdf-udp/tps_num.txt")))

pdf("/tmp/ag_multithreading.pdf")
m <- read.table(file("/Users/josh/data/rdf-udp/multithreading.txt"), header=TRUE)
plot(m$threads, m$threads * m$min,
  xlim=c(1,8), ylim=c(0,1000),
  ann=FALSE)
title(cex.lab=1.25,
  xlab="Number of receiving processes",
  ylab="Min/max throughput (transactions / second)")
fit <- smooth.spline(m$threads, m$threads * m$min, spar=0.5)
lines(fit)
points(m$threads, m$threads * m$max)
fit <- smooth.spline(m$threads, m$threads * m$max, spar=0.2)
lines(fit)
dev.off()


plot(m$threads, m$threads * m$max, m$threads, m$threads * m$min,
  xlim=c(0,8), ylim=c(0,1200))
