string>import math

class Vector:
	x = 0.0
	y = 0.0
	def add(self, other ):
		new = Vector()
		new.x = self.x + other.x
		new.y = self.y + other.y
		return new
	def mulScalar(self, c ):
		new = Vector()
		new.x = self.x * c
		new.y = self.y * c
		return new
	def toRectangular(self):
		new = Vector()
		new.x = self.x * math.cos(self.y)
		new.y = self.x * math.sin(self.y)
		return new

def looptest( fun, min, max, steps ):
	for i in range(min, max):
		print i
	return None

def plottest( fun, min, max, steps ):
	incr = (max - min) / (steps * 1.0)
	last = None
	for i in range(min, max):
		x = min + i * incr
		y = myfun(x)
		print "x = %d, y = %d" % (x, y)
	return None

def drawline(begin, end):
	print "drawing line from (%d, %d) to (%d, %d)" % (begin.x, begin.y, end.x, end.y)
	line = PLine()
	line.pointed = 0
	line.moveTo(begin.x, begin.y)
	line.lineTo(end.x, end.y)
	_self.lines.add(line)
	return None

def plotCart( fun, min, max, steps, origin, scale ):
	incr = (max - min) / (steps * 1.0)
	print "max - min = %d" % (incr)
	print "incr = %d" % (incr)
	last = None
	for i in range(0, steps):
		abs = Vector()
		abs.x = min + i * incr
		abs.y = fun(abs.x)
		print "(%d, %d)" % (abs.x, abs.y)
		cur = abs.mulScalar(scale).add(origin)
		print "    (%d, %d)" % (cur.x, cur.y)
		if (last != None):
			drawline(last, cur)
		last = cur
	return None

def plot2D( pointFun, min, max, steps, origin, scale ):
	incr = (max - min) / (steps * 1.0)
	print "max - min = %d" % (incr)
	print "incr = %d" % (incr)
	last = None
	for i in range(0, steps):
		t = min + i * incr
		abs = pointFun(t)
		print "(%d, %d)" % (abs.x, abs.y)
		cur = abs.mulScalar(scale).add(origin)
		print "    (%d, %d)" % (cur.x, cur.y)
		if (last != None):
			drawline(last, cur)
		last = cur
	return None

def plotPolar( polarFun, min, max, steps, origin, scale ):
	def pointFun( t ):
		return polarFun(t).toRectangular()
	plot2D( pointFun, min, max, steps, origin, scale )
	return None

def spiro( radius, offset, t ):
	centerPol = Vector()
	centerPol.x = 1 - radius
	centerPol.y = radius * t
	center = centerPol.toRectangular()
	rotated = t * math.pi * 2
	pLocalPol = Vector()
	pLocalPol.x = offset
	pLocalPol.y = rotated
	return center.add(pLocalPol.toRectangular())

def plotSpiro( radius, offset, rotations, steps, origin, scale ):
	def pointFun( t ):
		return spiro( radius, offset, t )
	plot2D( pointFun, 0.0, rotations, steps, origin, scale)
	return None, 

def myfun(x):
	return - (x * x)
#	return x * 2

def constfun(t):
	p = Vector()
	p.x = 1
	p.y = 2 * math.pi * t
	return p

#########

#_self.shouldAutoComputeRect = 0

#looptest(None, 0, 10, 10)

#plottest(myfun, 0, 10, 10)

_self.lines.clear()

origin = Vector()
origin.x = 0
origin.y = 0
plotCart(myfun, 0.0, 1.0, 10, origin, 300)
plotPolar(constfun, 0.0, 1.0, 70, origin, 100)

plotSpiro( 0.5, 0.25, 50, 5000, origin, 100 )

#print "pi = %d" % (math.pi)

