string>
# first of all, for this to work you need to have enabled the Processing Plugin (and you need to be able to see the window)

# running this code will start the processing control box and turn the processing window yellow

control = _self.find["processing control"]
control.begin()

# (the box will turn green to show you that it's running)

# now, jamming values into our global varible gives us as programmers "real time" control over the color of the window

color.x = 128
color.y = 20
color.z = 255

# the above code gives us a purple / blue color

# clearly we can get a lot of animation power using this technique. But "live-codeing" is exciting, "live-typing" isn't 

# one approach:
def animator():
	for n in range(0, 100):
		color.x = 255*Math.random()
		yield

animate = animator()
u.start(animate)

# and to stop it again (or just let it finish)
u.stop(animate)

# but that's pretty tedious. Enter _ex Ñ a special variable that wraps up variable assignment to offer extended options.

# in particular it lets us assign generators to variables
_ex.color.x = (Math.random()*255 for n in range(0,100))

# or smoothly interpolate from wherever that variable is to some value
_ex.color.x = dict(value=255.0, over=100)
_ex.color.x = dict(value=0.0, over=100)

# now, just so that we're in the same spot moving on, let's stop the "processing control"
control.end()
