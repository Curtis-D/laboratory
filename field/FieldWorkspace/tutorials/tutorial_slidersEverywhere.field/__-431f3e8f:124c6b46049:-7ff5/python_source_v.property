string>

# sometimes making art has a lot to do with finding numbers (colors, positions, speeds and so on
myImportantNumber = 10.3

# and you'll spend a lot of time typing 10.2, 10.5, 11, 12, and so on

# Field lets you embed things that are not text into the text editor

myImportantNumber = 0.3008299 + 10

# every other part of Field things that that is text (specifically "0.301"), but you interact with it not with a keyboard, but with a mouse. You can cursor around it like a piece of text, copy and paste it like a piece of text and delete it like a piece of text (by backspacing into it).

# right click on the slider to get some options about what should happen when you change the slider

# you make sliders using the right mouse button. There are all kinds of things that you can insert.

# here's a Vector2 (a position in 2d space). Note you can expand it out to be bigger (click on the button on the right)
myImportantPositionInSpace = Vector2(0.27216497,0.5423729)

print myImportantPositionInSpace
print myImportantPositionInSpace.x, myImportantPositionInSpace.y
print myImportantPositionInSpace[0], myImportantPositionInSpace[1]
print myImportantPositionInSpace*2.03+myImportantPositionInSpace

# an here's a mini graph editor (also expandable)

myImportantGraph = OKeyByName("Component_graph_provider:-431f3e8f:124c6b46049:-7fb6.transient", u.fromXML(r"""<field.math.util.CubicInterpolatorDynamic serialization="custom">  <field.math.util.CubicInterpolatorDynamic>    <default>      <after>1.0</after>      <before>0.07806691</before>      <cacheInvalid>false</cacheInvalid>      <duration>0.6022304</duration>      <extrapolation>false</extrapolation>      <indexAfter>2</indexAfter>      <indexBefore>0</indexBefore>      <indexNext>2</indexNext>      <indexNow>1</indexNow>      <linear>false</linear>      <next>1.0</next>      <now>0.39776957</now>      <comparator class="field.math.util.CubicInterpolatorDynamic$MComparator">        <outer-class reference="../../../.."/>      </comparator>      <samples>        <field.math.util.CubicInterpolatorDynamic_-Sample>          <data class="field.math.util.BreakpointFloat">            <value>0.5</value>            <controlNext>0.75423723</controlNext>            <controlPrevious>0.5</controlPrevious>            <next>cubic</next>          </data>          <time>0.07806691</time>          <outer-class reference="../../../../.."/>        </field.math.util.CubicInterpolatorDynamic_-Sample>        <field.math.util.CubicInterpolatorDynamic_-Sample>          <data class="field.math.util.BreakpointFloat">            <value>0.3779659</value>            <controlNext>0.538983</controlNext>            <controlPrevious>0.7</controlPrevious>            <next reference="../../../field.math.util.CubicInterpolatorDynamic$Sample/data/next"/>          </data>          <time>0.39776957</time>          <outer-class reference="../../../../.."/>        </field.math.util.CubicInterpolatorDynamic_-Sample>        <field.math.util.CubicInterpolatorDynamic_-Sample>          <data class="field.math.util.BreakpointFloat">            <value>0.5</value>            <controlNext>0.5</controlNext>            <controlPrevious>0.5</controlPrevious>            <next reference="../../../field.math.util.CubicInterpolatorDynamic$Sample/data/next"/>          </data>          <time>1.0</time>          <outer-class reference="../../../../.."/>        </field.math.util.CubicInterpolatorDynamic_-Sample>      </samples>      <temp>        <time>0.980198</time>        <outer-class reference="../../../.."/>      </temp>    </default>  </field.math.util.CubicInterpolatorDynamic></field.math.util.CubicInterpolatorDynamic>"""))

# here's how you get things from it
theGraph = myImportantGraph.get()
print theGraph.get(0.2)

for n in floatRange(0, 1, 30):
	print n, theGraph.get(n)

# finally, a color (double click to edit)

myFavoriteColor = Vector4(0.0, 0.0, 0.0, 1.0)
print myFavoriteColor



